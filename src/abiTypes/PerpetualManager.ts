/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AddAmmGovernanceAddress = ContractEventLog<{
  gAddress: string;
  0: string;
}>;
export type Clear = ContractEventLog<{
  perpetualId: string;
  trader: string;
  0: string;
  1: string;
}>;
export type Liquidate = ContractEventLog<{
  perpetualId: string;
  liquidator: string;
  trader: string;
  positionId: string;
  amountLiquidatedBC: string;
  liquidationPrice: string;
  newPositionSizeBC: string;
  blockTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;
export type LiquidityAdded = ContractEventLog<{
  poolId: string;
  user: string;
  tokenAmount: string;
  shareAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type LiquidityPoolCreated = ContractEventLog<{
  id: string;
  treasuryAddress: string;
  marginTokenAddress: string;
  shareTokenAddress: string;
  iTargetPoolSizeUpdateTime: string;
  iPnLparticipantWithdrawalPeriod: string;
  fPnLparticipantWithdrawalPercentageLimit: string;
  fPnLparticipantWithdrawalMinAmountLimit: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;
export type LiquidityRemoved = ContractEventLog<{
  poolId: string;
  user: string;
  tokenAmount: string;
  shareAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type PerpetualCreated = ContractEventLog<{
  poolId: string;
  id: string;
  oracles: string[];
  baseParams: string[];
  underlyingRiskParams: string[];
  defaultFundRiskParams: string[];
  eCollateralCurrency: string;
  0: string;
  1: string;
  2: string[];
  3: string[];
  4: string[];
  5: string[];
  6: string;
}>;
export type PerpetualLimitOrderCancelled = ContractEventLog<{
  orderHash: string;
  0: string;
}>;
export type RealizedPnL = ContractEventLog<{
  perpetualId: string;
  trader: string;
  positionId: string;
  pnlCC: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type RemoveAmmGovernanceAddress = ContractEventLog<{
  gAddress: string;
  0: string;
}>;
export type RunLiquidityPool = ContractEventLog<{
  _liqPoolID: string;
  0: string;
}>;
export type SetClearedState = ContractEventLog<{
  perpetualId: string;
  0: string;
}>;
export type SetEmergencyState = ContractEventLog<{
  perpetualId: string;
  fSettlementMarkPremiumRate: string;
  fSettlementS2Price: string;
  fSettlementS3Price: string;
  iTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type SetNormalState = ContractEventLog<{
  perpetualId: string;
  0: string;
}>;
export type SetOracles = ContractEventLog<{
  perpetualId: string;
  oracles: string[];
  0: string;
  1: string[];
}>;
export type SetParameter = ContractEventLog<{
  perpetualId: string;
  name: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type SetParameterPair = ContractEventLog<{
  perpetualId: string;
  name: string;
  value1: string;
  value2: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type SetPerpetualBaseParameters = ContractEventLog<{
  perpetualId: string;
  baseParams: string[];
  0: string;
  1: string[];
}>;
export type SetPerpetualRiskParameters = ContractEventLog<{
  perpetualId: string;
  underlyingRiskParams: string[];
  defaultFundRiskParams: string[];
  0: string;
  1: string[];
  2: string[];
}>;
export type SetTargetPoolSizeUpdateTime = ContractEventLog<{
  poolId: string;
  targetPoolSizeUpdateTime: string;
  0: string;
  1: string;
}>;
export type SetWithdrawalLimit = ContractEventLog<{
  poolId: string;
  PnLparticipantWithdrawalPeriod: string;
  PnLparticipantWithdrawalPercentageLimit: string;
  PnLparticipantWithdrawalMinAmountLimit: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Settle = ContractEventLog<{
  perpetualId: string;
  trader: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type TokensDeposited = ContractEventLog<{
  perpetualId: string;
  trader: string;
  amount: string;
  blockTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type TokensWithdrawn = ContractEventLog<{
  perpetualId: string;
  trader: string;
  amount: string;
  blockTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Trade = ContractEventLog<{
  perpetualId: string;
  trader: string;
  positionId: string;
  orderDigest: string;
  orderFlags: string;
  tradeAmountBC: string;
  newPositionSizeBC: string;
  price: string;
  limitPrice: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
  8: string;
}>;
export type TransferEarningsToTreasury = ContractEventLog<{
  _poolId: string;
  fEarnings: string;
  newDefaultFundSize: string;
  blockTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type TransferFeeToReferrer = ContractEventLog<{
  perpetualId: string;
  trader: string;
  referrer: string;
  referralRebate: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type TransferTreasuryTo = ContractEventLog<{
  poolId: string;
  oldTreasury: string;
  newTreasury: string;
  0: string;
  1: string;
  2: string;
}>;
export type UpdateAMMFundCash = ContractEventLog<{
  perpetualId: string;
  fNewAMMFundCash: string;
  fNewLiqPoolTotalAMMFundsCash: string;
  blockTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type UpdateAMMFundTargetSize = ContractEventLog<{
  perpetualId: string;
  liquidityPoolId: string;
  fAMMFundCashCCInPerpetual: string;
  fTargetAMMFundSizeInPerpetual: string;
  fAMMFundCashCCInPool: string;
  fTargetAMMFundSizeInPool: string;
  blockTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;
export type UpdateDefaultFundCash = ContractEventLog<{
  poolId: string;
  fDeltaAmountCC: string;
  fNewFundCash: string;
  blockTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type UpdateDefaultFundTargetSize = ContractEventLog<{
  liquidityPoolId: string;
  fDefaultFundCashCC: string;
  fTargetDFSize: string;
  blockTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type UpdateFundingRate = ContractEventLog<{
  perpetualId: string;
  fFundingRate: string;
  blockTimestamp: string;
  0: string;
  1: string;
  2: string;
}>;
export type UpdateMarginAccount = ContractEventLog<{
  perpetualId: string;
  trader: string;
  positionId: string;
  fPositionBC: string;
  fCashCC: string;
  fLockedInValueQC: string;
  fFundingPaymentCC: string;
  fOpenInterestBC: string;
  blockTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
  8: string;
}>;
export type UpdateMarkPrice = ContractEventLog<{
  perpetualId: string;
  fMarkPricePremium: string;
  fSpotIndexPrice: string;
  blockTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type UpdateParticipationFundCash = ContractEventLog<{
  poolId: string;
  fDeltaAmountCC: string;
  fNewFundCash: string;
  blockTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type UpdatePrice = ContractEventLog<{
  perpetualId: string;
  oracleS2Addr: string;
  oracleS3Addr: string;
  spotPriceS2: string;
  timePriceS2: string;
  spotPriceS3: string;
  timePriceS3: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;
export type UpdateReprTradeSizes = ContractEventLog<{
  perpetualId: string;
  fCurrentTraderExposureEMA: string;
  fCurrentAMMExposureEMAShort: string;
  fCurrentAMMExposureEMALong: string;
  blockTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type UpdateUnitAccumulatedFunding = ContractEventLog<{
  perpetualId: string;
  unitAccumulativeFunding: string;
  0: string;
  1: string;
}>;

export interface PerpetualManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PerpetualManager;
  clone(): PerpetualManager;
  methods: {
    activatePerpetual(
      _perpetualId: string | number[]
    ): NonPayableTransactionObject<void>;

    addAMMLiquidityToPerpetual(
      _iPerpetualId: string | number[],
      _fTokenAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    addAmmGovernanceAddress(
      _gAddress: string
    ): NonPayableTransactionObject<void>;

    addLiquidity(
      _iPoolIndex: number | string | BN,
      _fTokenAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    addToWhitelist(_accounts: string[]): NonPayableTransactionObject<void>;

    calculateDefaultFundSize(
      _fK2AMM: (number | string | BN)[],
      _fk2Trader: number | string | BN,
      _fCoverN: number | string | BN,
      fStressRet2: (number | string | BN)[],
      fStressRet3: (number | string | BN)[],
      fIndexPrices: (number | string | BN)[],
      _eCCY: number | string | BN
    ): NonPayableTransactionObject<string>;

    calculatePerpetualPrice(
      _ammVars: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _mktVars: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _fTradeAmount: number | string | BN,
      _fMinimalSpread: number | string | BN
    ): NonPayableTransactionObject<string>;

    calculateRiskNeutralPD(
      _ammVars: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _mktVars: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _fTradeAmount: number | string | BN,
      _withCDF: boolean
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    cancelOrder(
      _order: [
        string | number[],
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    countActivePerpAccounts(
      _perpId: string | number[]
    ): NonPayableTransactionObject<string>;

    createLiquidityPool(
      _treasuryAddress: string,
      _marginTokenAddress: string,
      _iTargetPoolSizeUpdateTime: number | string | BN,
      _iPnLparticipantWithdrawalPeriod: number | string | BN,
      _fPnLparticipantWithdrawalPercentageLimit: number | string | BN,
      _fPnLparticipantWithdrawalMinAmountLimit: number | string | BN,
      _fMaxTotalTraderFunds: number | string | BN
    ): NonPayableTransactionObject<string>;

    createPerpetual(
      _iPoolId: number | string | BN,
      _oracles: string[],
      _baseParams: (number | string | BN)[],
      _underlyingRiskParams: (number | string | BN)[],
      _defaultFundRiskParams: (number | string | BN)[],
      _eCollateralCurrency: number | string | BN
    ): NonPayableTransactionObject<void>;

    deposit(
      _iPerpetualId: string | number[],
      _fAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    depositMarginForNewLeveragedTrade(
      _iPerpetualId: string | number[],
      _fPrice: number | string | BN,
      _fTradeAmountBC: number | string | BN,
      _order: [
        string | number[],
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<boolean>;

    depositToDefaultFund(
      _poolId: number | string | BN,
      _fAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    distributeFees(
      _iPerpetualId: string | number[],
      _traderAddr: string,
      _referrerAddr: string,
      _fDeltaPositionBC: number | string | BN,
      _hasOpened: boolean
    ): NonPayableTransactionObject<string>;

    ema(
      _fEMA: number | string | BN,
      _fCurrentObs: number | string | BN,
      _fLambda: number | string | BN
    ): NonPayableTransactionObject<string>;

    executeTrade(
      _iPerpetualId: string | number[],
      _traderAddr: string,
      _fTraderPos: number | string | BN,
      _fTradeAmount: number | string | BN,
      _fPrice: number | string | BN,
      _isClose: boolean
    ): NonPayableTransactionObject<string>;

    getAMMPerpLogic(): NonPayableTransactionObject<string>;

    getAMMState(
      _iPerpetualId: string | number[]
    ): NonPayableTransactionObject<string[]>;

    getActivePerpAccounts(
      _perpId: string | number[]
    ): NonPayableTransactionObject<string[]>;

    getActivePerpAccountsByChunks(
      _perpId: string | number[],
      _from: number | string | BN,
      _to: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getAmountForPeriod(
      _poolId: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<string>;

    getCheckpoints(
      _poolId: number | string | BN,
      _account: string
    ): NonPayableTransactionObject<[string, string][]>;

    getDepositAmountForLvgPosition(
      _fPosition: number | string | BN,
      _fLeverage: number | string | BN,
      _fPrice: number | string | BN,
      _fS2: number | string | BN,
      _fS2Mark: number | string | BN,
      _fS3: number | string | BN,
      _fTotalFeeRate: number | string | BN
    ): NonPayableTransactionObject<string>;

    getGovernanceAddresses(): NonPayableTransactionObject<string[]>;

    getLiquidityPool(
      _id: number | string | BN
    ): NonPayableTransactionObject<
      [
        string,
        boolean,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ]
    >;

    getMarginAccount(
      _perpetualId: string | number[],
      _account: string
    ): NonPayableTransactionObject<[string, string, string, string, string]>;

    getMaxPosition(
      _perpetualId: string | number[]
    ): NonPayableTransactionObject<string>;

    getMaxSignedTradeSizeForPos(
      _perpetualId: string | number[],
      _fCurrentTraderPos: number | string | BN,
      fTradeAmountBC: number | string | BN
    ): NonPayableTransactionObject<string>;

    getOraclePriceData(
      _oracle: string
    ): NonPayableTransactionObject<[string, string, boolean]>;

    getPerpMarginAccount(
      _perpId: string | number[],
      _trader: string
    ): NonPayableTransactionObject<[string, string, string, string, string]>;

    getPerpetual(
      _perpetualId: string | number[]
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        [string, string, boolean],
        [string, string, boolean],
        string,
        [string, string, boolean],
        [string, string, boolean],
        [string, string, boolean],
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string[],
        string[],
        string,
        string[],
        string[],
        string,
        string,
        string,
        string,
        string,
        boolean,
        string,
        string[],
        string,
        string,
        string
      ]
    >;

    getPerpetualCountInPool(
      _poolId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getPerpetualId(
      _poolId: number | string | BN,
      _perpetualIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    getPoolCount(): NonPayableTransactionObject<string>;

    getPoolIdByPerpetualId(
      _perpetualId: string | number[]
    ): NonPayableTransactionObject<string>;

    getShareTokenFactory(): NonPayableTransactionObject<string>;

    getTargetCollateralM1(
      _fK2: number | string | BN,
      _fL1: number | string | BN,
      _mktVars: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _fTargetDD: number | string | BN
    ): NonPayableTransactionObject<string>;

    getTargetCollateralM2(
      _fK2: number | string | BN,
      _fL1: number | string | BN,
      _mktVars: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _fTargetDD: number | string | BN
    ): NonPayableTransactionObject<string>;

    getTargetCollateralM3(
      _fK2: number | string | BN,
      _fL1: number | string | BN,
      _mktVars: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _fTargetDD: number | string | BN
    ): NonPayableTransactionObject<string>;

    getTokenAmountToReturn(
      _poolId: number | string | BN,
      _fShareAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    getTraderState(
      _iPerpetualId: string | number[],
      _traderAddr: string
    ): NonPayableTransactionObject<string[]>;

    getUpdatedTargetAMMFundSize(
      _iPerpetualId: string | number[],
      _isBaseline: boolean
    ): NonPayableTransactionObject<string>;

    getWhitelistedAddresses(): NonPayableTransactionObject<string[]>;

    isActiveAccount(
      _perpetualId: string | number[],
      _account: string
    ): NonPayableTransactionObject<boolean>;

    isAddrWhitelisted(_account: string): NonPayableTransactionObject<boolean>;

    isGovernanceAddress(_address: string): NonPayableTransactionObject<boolean>;

    isTraderMaintenanceMarginSafe(
      _iPerpetualId: string | number[],
      _traderAddr: string
    ): NonPayableTransactionObject<boolean>;

    isTrustedForwarder(forwarder: string): NonPayableTransactionObject<boolean>;

    isWhitelistActive(): NonPayableTransactionObject<boolean>;

    isWhitelisted(_account: string): NonPayableTransactionObject<boolean>;

    liquidateByAMM(
      _perpetualIndex: string | number[],
      _liquidatorAddr: string,
      _traderAddr: string
    ): NonPayableTransactionObject<string>;

    preTrade(
      _iPerpetualId: string | number[],
      _traderAddr: string,
      _fAmount: number | string | BN,
      _fLimitPrice: number | string | BN,
      _flags: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    rebalance(
      _iPerpetualId: string | number[]
    ): NonPayableTransactionObject<void>;

    reduceMarginCollateral(
      _iPerpetualId: string | number[],
      _traderAddr: string,
      _fAmountToWithdraw: number | string | BN
    ): NonPayableTransactionObject<void>;

    removeAmmGovernanceAddress(
      _gAddress: string
    ): NonPayableTransactionObject<void>;

    removeFromWhitelist(_accounts: string[]): NonPayableTransactionObject<void>;

    removeLiquidity(
      _iPoolIndex: number | string | BN,
      _fShareAmount: number | string | BN,
      _fMinTokenAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    runLiquidityPool(
      _liqPoolID: number | string | BN
    ): NonPayableTransactionObject<void>;

    setAMMPerpLogic(_AMMPerpLogic: string): NonPayableTransactionObject<void>;

    setEmergencyState(
      _iPerpetualId: string | number[]
    ): NonPayableTransactionObject<void>;

    setMaxPosition(
      _perpetualId: string | number[],
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    setPerpetualBaseParams(
      _iPerpetualId: string | number[],
      _baseParams: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    setPerpetualOracles(
      _iPerpetualId: string | number[],
      _oracles: string[]
    ): NonPayableTransactionObject<void>;

    setPerpetualParam(
      _iPerpetualId: string | number[],
      _varName: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    setPerpetualParamPair(
      _iPerpetualId: string | number[],
      _name: string,
      _value1: number | string | BN,
      _value2: number | string | BN
    ): NonPayableTransactionObject<void>;

    setPerpetualPoolFactory(
      _shareTokenFactory: string
    ): NonPayableTransactionObject<void>;

    setPerpetualRiskParams(
      _iPerpetualId: string | number[],
      _underlyingRiskParams: (number | string | BN)[],
      _defaultFundRiskParams: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    setTargetPoolSizeUpdateTime(
      _poolId: number | string | BN,
      _iTargetPoolSizeUpdateTime: number | string | BN
    ): NonPayableTransactionObject<void>;

    setTreasury(
      _liqPoolID: number | string | BN,
      _treasury: string
    ): NonPayableTransactionObject<void>;

    setTrustedForwarder(_forwarder: string): NonPayableTransactionObject<void>;

    setWhitelistActive(_flag: boolean): NonPayableTransactionObject<void>;

    setWithdrawalLimit(
      _poolId: number | string | BN,
      _iPnLparticipantWithdrawalPeriod: number | string | BN,
      _fPnLparticipantWithdrawalPercentageLimit: number | string | BN,
      _fPnLparticipantWithdrawalMinAmountLimit: number | string | BN
    ): NonPayableTransactionObject<void>;

    settle(
      _perpetualID: string | number[],
      _traderAddr: string
    ): NonPayableTransactionObject<void>;

    settleNextTraderInPool(
      _id: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    trade(
      _order: [
        string | number[],
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<void>;

    tradeBySig(
      _order: [
        string | number[],
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    transferEarningsToTreasury(
      _poolId: number | string | BN,
      _fAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    trustedForwarder(): NonPayableTransactionObject<string>;

    updateAMMTargetFundSize(
      _iPerpetualId: string | number[],
      fTargetFundSize: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateDefaultFundTargetSize(
      _iPoolIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateFundingAndPricesAfter(
      _iPoolIdx: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateFundingAndPricesBefore(
      _iPoolIdx: number | string | BN
    ): NonPayableTransactionObject<void>;

    validateStopPrice(
      _isLong: boolean,
      _fMarkPrice: number | string | BN,
      _fTriggerPrice: number | string | BN
    ): NonPayableTransactionObject<void>;

    versionRecipient(): NonPayableTransactionObject<string>;

    withdraw(
      _iPerpetualId: string | number[],
      _fAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdrawAll(
      _iPerpetualId: string | number[]
    ): NonPayableTransactionObject<void>;

    withdrawDepositFromMarginAccount(
      _iPerpetualId: string | number[],
      _traderAddr: string
    ): NonPayableTransactionObject<void>;

    withdrawFromDefaultFund(
      _poolId: number | string | BN,
      _receiver: string,
      _fAmount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AddAmmGovernanceAddress(
      cb?: Callback<AddAmmGovernanceAddress>
    ): EventEmitter;
    AddAmmGovernanceAddress(
      options?: EventOptions,
      cb?: Callback<AddAmmGovernanceAddress>
    ): EventEmitter;

    Clear(cb?: Callback<Clear>): EventEmitter;
    Clear(options?: EventOptions, cb?: Callback<Clear>): EventEmitter;

    Liquidate(cb?: Callback<Liquidate>): EventEmitter;
    Liquidate(options?: EventOptions, cb?: Callback<Liquidate>): EventEmitter;

    LiquidityAdded(cb?: Callback<LiquidityAdded>): EventEmitter;
    LiquidityAdded(
      options?: EventOptions,
      cb?: Callback<LiquidityAdded>
    ): EventEmitter;

    LiquidityPoolCreated(cb?: Callback<LiquidityPoolCreated>): EventEmitter;
    LiquidityPoolCreated(
      options?: EventOptions,
      cb?: Callback<LiquidityPoolCreated>
    ): EventEmitter;

    LiquidityRemoved(cb?: Callback<LiquidityRemoved>): EventEmitter;
    LiquidityRemoved(
      options?: EventOptions,
      cb?: Callback<LiquidityRemoved>
    ): EventEmitter;

    PerpetualCreated(cb?: Callback<PerpetualCreated>): EventEmitter;
    PerpetualCreated(
      options?: EventOptions,
      cb?: Callback<PerpetualCreated>
    ): EventEmitter;

    PerpetualLimitOrderCancelled(
      cb?: Callback<PerpetualLimitOrderCancelled>
    ): EventEmitter;
    PerpetualLimitOrderCancelled(
      options?: EventOptions,
      cb?: Callback<PerpetualLimitOrderCancelled>
    ): EventEmitter;

    RealizedPnL(cb?: Callback<RealizedPnL>): EventEmitter;
    RealizedPnL(
      options?: EventOptions,
      cb?: Callback<RealizedPnL>
    ): EventEmitter;

    RemoveAmmGovernanceAddress(
      cb?: Callback<RemoveAmmGovernanceAddress>
    ): EventEmitter;
    RemoveAmmGovernanceAddress(
      options?: EventOptions,
      cb?: Callback<RemoveAmmGovernanceAddress>
    ): EventEmitter;

    RunLiquidityPool(cb?: Callback<RunLiquidityPool>): EventEmitter;
    RunLiquidityPool(
      options?: EventOptions,
      cb?: Callback<RunLiquidityPool>
    ): EventEmitter;

    SetClearedState(cb?: Callback<SetClearedState>): EventEmitter;
    SetClearedState(
      options?: EventOptions,
      cb?: Callback<SetClearedState>
    ): EventEmitter;

    SetEmergencyState(cb?: Callback<SetEmergencyState>): EventEmitter;
    SetEmergencyState(
      options?: EventOptions,
      cb?: Callback<SetEmergencyState>
    ): EventEmitter;

    SetNormalState(cb?: Callback<SetNormalState>): EventEmitter;
    SetNormalState(
      options?: EventOptions,
      cb?: Callback<SetNormalState>
    ): EventEmitter;

    SetOracles(cb?: Callback<SetOracles>): EventEmitter;
    SetOracles(options?: EventOptions, cb?: Callback<SetOracles>): EventEmitter;

    SetParameter(cb?: Callback<SetParameter>): EventEmitter;
    SetParameter(
      options?: EventOptions,
      cb?: Callback<SetParameter>
    ): EventEmitter;

    SetParameterPair(cb?: Callback<SetParameterPair>): EventEmitter;
    SetParameterPair(
      options?: EventOptions,
      cb?: Callback<SetParameterPair>
    ): EventEmitter;

    SetPerpetualBaseParameters(
      cb?: Callback<SetPerpetualBaseParameters>
    ): EventEmitter;
    SetPerpetualBaseParameters(
      options?: EventOptions,
      cb?: Callback<SetPerpetualBaseParameters>
    ): EventEmitter;

    SetPerpetualRiskParameters(
      cb?: Callback<SetPerpetualRiskParameters>
    ): EventEmitter;
    SetPerpetualRiskParameters(
      options?: EventOptions,
      cb?: Callback<SetPerpetualRiskParameters>
    ): EventEmitter;

    SetTargetPoolSizeUpdateTime(
      cb?: Callback<SetTargetPoolSizeUpdateTime>
    ): EventEmitter;
    SetTargetPoolSizeUpdateTime(
      options?: EventOptions,
      cb?: Callback<SetTargetPoolSizeUpdateTime>
    ): EventEmitter;

    SetWithdrawalLimit(cb?: Callback<SetWithdrawalLimit>): EventEmitter;
    SetWithdrawalLimit(
      options?: EventOptions,
      cb?: Callback<SetWithdrawalLimit>
    ): EventEmitter;

    Settle(cb?: Callback<Settle>): EventEmitter;
    Settle(options?: EventOptions, cb?: Callback<Settle>): EventEmitter;

    TokensDeposited(cb?: Callback<TokensDeposited>): EventEmitter;
    TokensDeposited(
      options?: EventOptions,
      cb?: Callback<TokensDeposited>
    ): EventEmitter;

    TokensWithdrawn(cb?: Callback<TokensWithdrawn>): EventEmitter;
    TokensWithdrawn(
      options?: EventOptions,
      cb?: Callback<TokensWithdrawn>
    ): EventEmitter;

    Trade(cb?: Callback<Trade>): EventEmitter;
    Trade(options?: EventOptions, cb?: Callback<Trade>): EventEmitter;

    TransferEarningsToTreasury(
      cb?: Callback<TransferEarningsToTreasury>
    ): EventEmitter;
    TransferEarningsToTreasury(
      options?: EventOptions,
      cb?: Callback<TransferEarningsToTreasury>
    ): EventEmitter;

    TransferFeeToReferrer(cb?: Callback<TransferFeeToReferrer>): EventEmitter;
    TransferFeeToReferrer(
      options?: EventOptions,
      cb?: Callback<TransferFeeToReferrer>
    ): EventEmitter;

    TransferTreasuryTo(cb?: Callback<TransferTreasuryTo>): EventEmitter;
    TransferTreasuryTo(
      options?: EventOptions,
      cb?: Callback<TransferTreasuryTo>
    ): EventEmitter;

    UpdateAMMFundCash(cb?: Callback<UpdateAMMFundCash>): EventEmitter;
    UpdateAMMFundCash(
      options?: EventOptions,
      cb?: Callback<UpdateAMMFundCash>
    ): EventEmitter;

    UpdateAMMFundTargetSize(
      cb?: Callback<UpdateAMMFundTargetSize>
    ): EventEmitter;
    UpdateAMMFundTargetSize(
      options?: EventOptions,
      cb?: Callback<UpdateAMMFundTargetSize>
    ): EventEmitter;

    UpdateDefaultFundCash(cb?: Callback<UpdateDefaultFundCash>): EventEmitter;
    UpdateDefaultFundCash(
      options?: EventOptions,
      cb?: Callback<UpdateDefaultFundCash>
    ): EventEmitter;

    UpdateDefaultFundTargetSize(
      cb?: Callback<UpdateDefaultFundTargetSize>
    ): EventEmitter;
    UpdateDefaultFundTargetSize(
      options?: EventOptions,
      cb?: Callback<UpdateDefaultFundTargetSize>
    ): EventEmitter;

    UpdateFundingRate(cb?: Callback<UpdateFundingRate>): EventEmitter;
    UpdateFundingRate(
      options?: EventOptions,
      cb?: Callback<UpdateFundingRate>
    ): EventEmitter;

    UpdateMarginAccount(cb?: Callback<UpdateMarginAccount>): EventEmitter;
    UpdateMarginAccount(
      options?: EventOptions,
      cb?: Callback<UpdateMarginAccount>
    ): EventEmitter;

    UpdateMarkPrice(cb?: Callback<UpdateMarkPrice>): EventEmitter;
    UpdateMarkPrice(
      options?: EventOptions,
      cb?: Callback<UpdateMarkPrice>
    ): EventEmitter;

    UpdateParticipationFundCash(
      cb?: Callback<UpdateParticipationFundCash>
    ): EventEmitter;
    UpdateParticipationFundCash(
      options?: EventOptions,
      cb?: Callback<UpdateParticipationFundCash>
    ): EventEmitter;

    UpdatePrice(cb?: Callback<UpdatePrice>): EventEmitter;
    UpdatePrice(
      options?: EventOptions,
      cb?: Callback<UpdatePrice>
    ): EventEmitter;

    UpdateReprTradeSizes(cb?: Callback<UpdateReprTradeSizes>): EventEmitter;
    UpdateReprTradeSizes(
      options?: EventOptions,
      cb?: Callback<UpdateReprTradeSizes>
    ): EventEmitter;

    UpdateUnitAccumulatedFunding(
      cb?: Callback<UpdateUnitAccumulatedFunding>
    ): EventEmitter;
    UpdateUnitAccumulatedFunding(
      options?: EventOptions,
      cb?: Callback<UpdateUnitAccumulatedFunding>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "AddAmmGovernanceAddress",
    cb: Callback<AddAmmGovernanceAddress>
  ): void;
  once(
    event: "AddAmmGovernanceAddress",
    options: EventOptions,
    cb: Callback<AddAmmGovernanceAddress>
  ): void;

  once(event: "Clear", cb: Callback<Clear>): void;
  once(event: "Clear", options: EventOptions, cb: Callback<Clear>): void;

  once(event: "Liquidate", cb: Callback<Liquidate>): void;
  once(
    event: "Liquidate",
    options: EventOptions,
    cb: Callback<Liquidate>
  ): void;

  once(event: "LiquidityAdded", cb: Callback<LiquidityAdded>): void;
  once(
    event: "LiquidityAdded",
    options: EventOptions,
    cb: Callback<LiquidityAdded>
  ): void;

  once(event: "LiquidityPoolCreated", cb: Callback<LiquidityPoolCreated>): void;
  once(
    event: "LiquidityPoolCreated",
    options: EventOptions,
    cb: Callback<LiquidityPoolCreated>
  ): void;

  once(event: "LiquidityRemoved", cb: Callback<LiquidityRemoved>): void;
  once(
    event: "LiquidityRemoved",
    options: EventOptions,
    cb: Callback<LiquidityRemoved>
  ): void;

  once(event: "PerpetualCreated", cb: Callback<PerpetualCreated>): void;
  once(
    event: "PerpetualCreated",
    options: EventOptions,
    cb: Callback<PerpetualCreated>
  ): void;

  once(
    event: "PerpetualLimitOrderCancelled",
    cb: Callback<PerpetualLimitOrderCancelled>
  ): void;
  once(
    event: "PerpetualLimitOrderCancelled",
    options: EventOptions,
    cb: Callback<PerpetualLimitOrderCancelled>
  ): void;

  once(event: "RealizedPnL", cb: Callback<RealizedPnL>): void;
  once(
    event: "RealizedPnL",
    options: EventOptions,
    cb: Callback<RealizedPnL>
  ): void;

  once(
    event: "RemoveAmmGovernanceAddress",
    cb: Callback<RemoveAmmGovernanceAddress>
  ): void;
  once(
    event: "RemoveAmmGovernanceAddress",
    options: EventOptions,
    cb: Callback<RemoveAmmGovernanceAddress>
  ): void;

  once(event: "RunLiquidityPool", cb: Callback<RunLiquidityPool>): void;
  once(
    event: "RunLiquidityPool",
    options: EventOptions,
    cb: Callback<RunLiquidityPool>
  ): void;

  once(event: "SetClearedState", cb: Callback<SetClearedState>): void;
  once(
    event: "SetClearedState",
    options: EventOptions,
    cb: Callback<SetClearedState>
  ): void;

  once(event: "SetEmergencyState", cb: Callback<SetEmergencyState>): void;
  once(
    event: "SetEmergencyState",
    options: EventOptions,
    cb: Callback<SetEmergencyState>
  ): void;

  once(event: "SetNormalState", cb: Callback<SetNormalState>): void;
  once(
    event: "SetNormalState",
    options: EventOptions,
    cb: Callback<SetNormalState>
  ): void;

  once(event: "SetOracles", cb: Callback<SetOracles>): void;
  once(
    event: "SetOracles",
    options: EventOptions,
    cb: Callback<SetOracles>
  ): void;

  once(event: "SetParameter", cb: Callback<SetParameter>): void;
  once(
    event: "SetParameter",
    options: EventOptions,
    cb: Callback<SetParameter>
  ): void;

  once(event: "SetParameterPair", cb: Callback<SetParameterPair>): void;
  once(
    event: "SetParameterPair",
    options: EventOptions,
    cb: Callback<SetParameterPair>
  ): void;

  once(
    event: "SetPerpetualBaseParameters",
    cb: Callback<SetPerpetualBaseParameters>
  ): void;
  once(
    event: "SetPerpetualBaseParameters",
    options: EventOptions,
    cb: Callback<SetPerpetualBaseParameters>
  ): void;

  once(
    event: "SetPerpetualRiskParameters",
    cb: Callback<SetPerpetualRiskParameters>
  ): void;
  once(
    event: "SetPerpetualRiskParameters",
    options: EventOptions,
    cb: Callback<SetPerpetualRiskParameters>
  ): void;

  once(
    event: "SetTargetPoolSizeUpdateTime",
    cb: Callback<SetTargetPoolSizeUpdateTime>
  ): void;
  once(
    event: "SetTargetPoolSizeUpdateTime",
    options: EventOptions,
    cb: Callback<SetTargetPoolSizeUpdateTime>
  ): void;

  once(event: "SetWithdrawalLimit", cb: Callback<SetWithdrawalLimit>): void;
  once(
    event: "SetWithdrawalLimit",
    options: EventOptions,
    cb: Callback<SetWithdrawalLimit>
  ): void;

  once(event: "Settle", cb: Callback<Settle>): void;
  once(event: "Settle", options: EventOptions, cb: Callback<Settle>): void;

  once(event: "TokensDeposited", cb: Callback<TokensDeposited>): void;
  once(
    event: "TokensDeposited",
    options: EventOptions,
    cb: Callback<TokensDeposited>
  ): void;

  once(event: "TokensWithdrawn", cb: Callback<TokensWithdrawn>): void;
  once(
    event: "TokensWithdrawn",
    options: EventOptions,
    cb: Callback<TokensWithdrawn>
  ): void;

  once(event: "Trade", cb: Callback<Trade>): void;
  once(event: "Trade", options: EventOptions, cb: Callback<Trade>): void;

  once(
    event: "TransferEarningsToTreasury",
    cb: Callback<TransferEarningsToTreasury>
  ): void;
  once(
    event: "TransferEarningsToTreasury",
    options: EventOptions,
    cb: Callback<TransferEarningsToTreasury>
  ): void;

  once(
    event: "TransferFeeToReferrer",
    cb: Callback<TransferFeeToReferrer>
  ): void;
  once(
    event: "TransferFeeToReferrer",
    options: EventOptions,
    cb: Callback<TransferFeeToReferrer>
  ): void;

  once(event: "TransferTreasuryTo", cb: Callback<TransferTreasuryTo>): void;
  once(
    event: "TransferTreasuryTo",
    options: EventOptions,
    cb: Callback<TransferTreasuryTo>
  ): void;

  once(event: "UpdateAMMFundCash", cb: Callback<UpdateAMMFundCash>): void;
  once(
    event: "UpdateAMMFundCash",
    options: EventOptions,
    cb: Callback<UpdateAMMFundCash>
  ): void;

  once(
    event: "UpdateAMMFundTargetSize",
    cb: Callback<UpdateAMMFundTargetSize>
  ): void;
  once(
    event: "UpdateAMMFundTargetSize",
    options: EventOptions,
    cb: Callback<UpdateAMMFundTargetSize>
  ): void;

  once(
    event: "UpdateDefaultFundCash",
    cb: Callback<UpdateDefaultFundCash>
  ): void;
  once(
    event: "UpdateDefaultFundCash",
    options: EventOptions,
    cb: Callback<UpdateDefaultFundCash>
  ): void;

  once(
    event: "UpdateDefaultFundTargetSize",
    cb: Callback<UpdateDefaultFundTargetSize>
  ): void;
  once(
    event: "UpdateDefaultFundTargetSize",
    options: EventOptions,
    cb: Callback<UpdateDefaultFundTargetSize>
  ): void;

  once(event: "UpdateFundingRate", cb: Callback<UpdateFundingRate>): void;
  once(
    event: "UpdateFundingRate",
    options: EventOptions,
    cb: Callback<UpdateFundingRate>
  ): void;

  once(event: "UpdateMarginAccount", cb: Callback<UpdateMarginAccount>): void;
  once(
    event: "UpdateMarginAccount",
    options: EventOptions,
    cb: Callback<UpdateMarginAccount>
  ): void;

  once(event: "UpdateMarkPrice", cb: Callback<UpdateMarkPrice>): void;
  once(
    event: "UpdateMarkPrice",
    options: EventOptions,
    cb: Callback<UpdateMarkPrice>
  ): void;

  once(
    event: "UpdateParticipationFundCash",
    cb: Callback<UpdateParticipationFundCash>
  ): void;
  once(
    event: "UpdateParticipationFundCash",
    options: EventOptions,
    cb: Callback<UpdateParticipationFundCash>
  ): void;

  once(event: "UpdatePrice", cb: Callback<UpdatePrice>): void;
  once(
    event: "UpdatePrice",
    options: EventOptions,
    cb: Callback<UpdatePrice>
  ): void;

  once(event: "UpdateReprTradeSizes", cb: Callback<UpdateReprTradeSizes>): void;
  once(
    event: "UpdateReprTradeSizes",
    options: EventOptions,
    cb: Callback<UpdateReprTradeSizes>
  ): void;

  once(
    event: "UpdateUnitAccumulatedFunding",
    cb: Callback<UpdateUnitAccumulatedFunding>
  ): void;
  once(
    event: "UpdateUnitAccumulatedFunding",
    options: EventOptions,
    cb: Callback<UpdateUnitAccumulatedFunding>
  ): void;
}
